I"*<h2 id="toc">TOC</h2>
<ol id="markdown-toc">
  <li><a href="#toc" id="markdown-toc-toc">TOC</a></li>
  <li><a href="#searching" id="markdown-toc-searching">Searching</a></li>
  <li><a href="#sequential-search" id="markdown-toc-sequential-search">Sequential search</a></li>
  <li><a href="#binary-search" id="markdown-toc-binary-search">Binary search</a></li>
  <li><a href="#hashing" id="markdown-toc-hashing">Hashing</a>    <ol>
      <li><a href="#哈希表" id="markdown-toc-哈希表">哈希表</a></li>
      <li><a href="#哈希函数" id="markdown-toc-哈希函数">哈希函数</a></li>
    </ol>
  </li>
</ol>

<h2 id="searching">Searching</h2>

<ul>
  <li>顺序查找　sequential search</li>
  <li>二分查找　binary search/img/deep_learning_course//img/deep_learning_course/</li>
  <li>哈希表和哈希查找　hashing</li>
</ul>

<h2 id="sequential-search">Sequential search</h2>

<p>Sequential search with <em>Unordered list</em></p>

<p><img src="/img/deep_learning_course/search_sequential.png" style="100%" /></p>

<p>… with <em>ordered list</em>:</p>

<p>&lt;img src=’/img/deep_learning_course/search_sequential_ordered.png’, style=’120%’&gt;</p>

<h2 id="binary-search">Binary search</h2>

<p>The complexity is $O(log(n))$. It is important to note that for small values of n, the <strong>additional cost of sorting</strong> is probably <strong>not worth</strong> it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">recursionBinarySearch</span><span class="p">(</span><span class="n">alist</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="n">first</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">last</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">alist</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">global</span> <span class="n">found</span>

    <span class="k">while</span> <span class="n">first</span><span class="o">&lt;=</span> <span class="n">last</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">last</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">alist</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="n">alist</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">last</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">return</span> <span class="n">recursionBinarySearch</span><span class="p">(</span><span class="n">alist</span><span class="p">[</span><span class="n">first</span><span class="p">:</span><span class="n">last</span><span class="p">],</span> <span class="n">item</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">first</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">recursionBinarySearch</span><span class="p">(</span><span class="n">alist</span><span class="p">[</span><span class="n">first</span><span class="p">:</span> <span class="n">last</span><span class="p">],</span> <span class="n">item</span><span class="p">)</span>
<span class="c1">#         print('first', first, 'last', last)
</span>    <span class="k">return</span> <span class="n">found</span>


<span class="n">testlist</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">42</span><span class="p">,]</span>
<span class="k">print</span><span class="p">(</span><span class="n">recursionBinarySearch</span><span class="p">(</span><span class="n">testlist</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="c1"># print(binarySearch(testlist, 13))
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False
</code></pre></div></div>

<h2 id="hashing">Hashing</h2>

<p>哈希表的搜索复杂度为O(1)，<strong>Python中dictionary 和 set 是用哈希表实现的</strong>．</p>

<h3 id="哈希表">哈希表</h3>

<p>哈希表中每个位置被称为slot, 每个位置能容纳一个item，item的最初值为None,　每个位置都已从０开始数字命名．如下所示：</p>

<p><img src="/img/deep_learning_course/hashing_slot.png" width="800" /></p>

<h3 id="哈希函数">哈希函数</h3>

<p>哈希函数：根据给定的关键字，决定存储位置的函数。</p>

<p>基本原则：使得到的地址近可能多的均匀分布在给定空间</p>

<p><strong>解决冲突</strong></p>
:ET