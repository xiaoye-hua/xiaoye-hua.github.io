I"M(<h1 id="process-vs-thread">Process VS Thread</h1>
<p>A process is an instance of program (e.g. Jupyter notebook, Python interpreter). Processes spawn threads (sub-processes) to handle subtasks like reading keystrokes, loading HTML pages, saving files. Threads live inside processes and share the same memory space.</p>

<p><strong>Scenarios fo multi-process and multi-thread</strong>：</p>

<ol>
  <li>Processes speed up Python operations that are <strong>CPU intensive</strong> because they benefit from multiple cores and avoid the GIL.</li>
  <li>Threads are best for <strong>IO tasks</strong> or tasks involving external systems because threads can combine their work more efficiently. Processes need to pickle their results to combine them which takes time.</li>
  <li>Threads provide no benefit in python for CPU intensive tasks because of the GIL.</li>
</ol>

<p><a href="https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b">Ref</a></p>

<h1 id="concurrent--parallel-并发和并行">Concurrent &amp; parallel （并发和并行）</h1>

<ol>
  <li>并行是并发的子集</li>
  <li>并发：不同任务同时进行</li>
  <li>并行：同task被分为subtask 然后并行执行</li>
</ol>

<h1 id="parallel-in-python">Parallel in Python</h1>

<p>python 3.2之前用 Multiprocess，Thread管理。python 3.2后用 concurent.future 管理， 有线程池和进程池。<a href="https://python-parallel-programmning-cookbook.readthedocs.io/zh_CN/latest/chapter4/02_Using_the_concurrent.futures_Python_modules.html">参考链接</a></p>

<h2 id="python-并行序列化的问题">Python 并行序列化的问题</h2>
<p>机器学习，实验验证效果过程中，出错如下：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeError: can<span class="s1">'t pickle _thread.RLock objects
</span></code></pre></div></div>
<h3 id="之前代码如下">之前代码如下</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Validator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
        <span class="c1"># 初始化机器学习模型
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
    
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="c1"># 并行调用 self._single_run
</span>    
    <span class="k">def</span> <span class="nf">_single_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 模型推断
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">inference</span>
        
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">ml_model</span>
    <span class="n">validator</span> <span class="o">=</span> <span class="n">Validator</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
    <span class="n">validator</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
    
</code></pre></div></div>

<h3 id="原因">原因</h3>
<p>千辛万苦定位问题，主要原因为在并行之前，会用pickle模块将这个模型类进行序列化，然而可能这个模型类无法被序列化，于是出现这个问题。</p>

<p><a href="https://blog.csdn.net/weixin_41935140/article/details/81153611">Ref</a></p>

<h3 id="不太优雅的解决方式">不太优雅的解决方式</h3>
<p>目前采用的不太优雅的解决方案：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 初始化机器学习模型
</span><span class="n">model</span> <span class="o">=</span> <span class="n">ml_model</span>

<span class="k">class</span> <span class="nc">Validator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>
    
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="c1"># 并行调用 self._single_run
</span>
    <span class="k">def</span> <span class="nf">_single_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 模型推断
</span>        <span class="n">model</span><span class="p">.</span><span class="n">inference</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">validator</span> <span class="o">=</span> <span class="n">Validator</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">)</span>
    <span class="n">validator</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="concurentfuture-multiprocess-error-when-running-on-windows">concurent.future, multiprocess error when running on windows</h3>
<p>error：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>concurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.
</code></pre></div></div>
<p>How fix:</p>

<p>Put the main() under <code class="language-plaintext highlighter-rouge">if __name__ == "__main__"</code>:</p>

<h2 id="parellel-and-tensorflow">Parellel and tensorflow</h2>
<p>error:</p>

<p>Tensorflow hangs when initializing vairable in multi process setting</p>

<p>How to solve:</p>

<p>Put the follow code under <code class="language-plaintext highlighter-rouge">if __name__ == "main":</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mp.set_start_method("spawn:)
</code></pre></div></div>

<p><a href="https://github.com/tensorflow/tensorflow/issues/5448">Ref</a></p>

<h1 id="appendix">Appendix</h1>
<h2 id="concurentfuturethreadpool-processpool-example">concurent.future.ThreadPool, ProcessPool example</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import concurrent.futures                                                                
import time                                                                              
number_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                            
                                                                                         
def evaluate_item(x):                                                                    
        # 计算总和，这里只是为了消耗时间                                                                
        result_item = count(x)                                                           
        # 打印输入和输出结果                                                                      
        return 1                                                                         
                                                                                         
def  count(number) :                                                                     
        for i in range(0, 10000000):                                                     
                i=i+1                                                                    
        return i * number                                                                
                                                                                         
if __name__ == "__main__":                                                               
        # 顺序执行                                                                           
        start_time = time.time()                                                         
        for item in number_list:                                                         
                print(evaluate_item(item))                                               
        print("Sequential execution in " + str(time.time() - start_time), "seconds")     
        # 线程池执行                                                                          
        start_time_1 = time.time()                                                       
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:           
                futures = [executor.submit(evaluate_item, item) for item in number_list] 
                for future in concurrent.futures.as_completed(futures):                  
                        print(future.result())                                           
        print ("Thread pool execution in " + str(time.time() - start_time_1), "seconds") 
        # 进程池                                                                            
        start_time_2 = time.time()                                                       
        with concurrent.futures.ProcessPoolExecutor(max_workers=5) as executor:          
                futures = [executor.submit(evaluate_item, item) for item in number_list] 
                for future in concurrent.futures.as_completed(futures):                  
                        print(future.result())                                           
        print ("Process pool execution in " + str(time.time() - start_time_2), "seconds")
</code></pre></div></div>
:ET